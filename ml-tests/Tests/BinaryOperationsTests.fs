module ml_tests.NumOperationTests

open NUnit.Framework
open mini_ml_tests.Parser

[<TestFixture>]
type BinaryOperationsTests () =
    
    [<TestCase("1 + 3", "4")>]
    [<TestCase("3 - 2", "1")>]
    [<TestCase("2 * 3", "6")>]
    [<TestCase("12 / 4", "3")>]
    [<TestCase("4 % 2", "0")>]
    [<TestCase("2 * 3", "6")>]
    [<TestCase("1 + 2 * 3", "7")>]
    [<TestCase("1 + 2 * 3 + 4", "11")>]
    [<TestCase("1 + 2 * 3 + 4 * 5", "27")>]
    [<TestCase("1 + 2 * 3 + 4 * 5 + 6", "33")>]
    [<TestCase("1 + 2 * 3 + 4 * 5 + 6 * 7", "69")>]
    [<TestCase("1 + 4 / 2", "3")>]
    [<TestCase("1 + 4 / 2 * 3", "7")>]
    [<TestCase("1 + 4 / 2 * 3 + 6", "13")>]
    [<TestCase("1 + 4 / 2 * 3 + 6 / 2", "10")>]
    [<TestCase("1 + 4 / 2 * 3 + 6 / 2 * 5", "22")>]
    member this.TestNumOperationsReduction(actual: string, expected: string) =
        reduce_equals actual expected
    
        
    [<TestCase("true", "true")>]
    [<TestCase("false", "false")>]
    [<TestCase("true && true", "true")>]
    [<TestCase("true && false", "false")>]
    [<TestCase("false && true", "false")>]
    [<TestCase("false && false", "false")>]
    [<TestCase("true || true", "true")>]
    [<TestCase("true || false", "true")>]
    [<TestCase("false || true", "true")>]
    [<TestCase("false || false", "false")>]
    [<TestCase("true || false && true", "true")>]
    [<TestCase("true || false && false", "true")>]
    [<TestCase("false || true && true", "true")>]
    [<TestCase("false || true && false", "false")>]
    [<TestCase("false || false && true", "false")>]
    [<TestCase("false || false && false", "false")>]
    [<TestCase("true && false || true", "true")>]
    [<TestCase("true && false || false", "false")>]
    [<TestCase("false && true || true", "true")>]
    [<TestCase("false && true || false", "false")>]
    [<TestCase("false && false || true", "true")>]
    [<TestCase("false && false || false", "false")>]
    member this.TestBoolOperations(actual: string, expected: string) =
        reduce_equals actual expected
    
    [<TestCase("3 < 2", "false")>]
    [<TestCase("2 < 3", "true")>]
    [<TestCase("12 < 4", "false")>]
    [<TestCase("4 < 2", "false")>]
    [<TestCase("1 <= 3", "true")>]
    [<TestCase("3 <= 2", "false")>]
    [<TestCase("2 <= 3", "true")>]
    [<TestCase("12 <= 4", "false")>]
    [<TestCase("4 <= 2", "false")>]
    [<TestCase("1 <= 1", "true")>]
    [<TestCase("1 > 3", "false")>]
    [<TestCase("3 > 2", "true")>]
    [<TestCase("2 > 3", "false")>]
    [<TestCase("12 > 4", "true")>]
    [<TestCase("4 > 2", "true")>]
    [<TestCase("1 >= 3", "false")>]
    [<TestCase("3 >= 2", "true")>]
    [<TestCase("2 >= 3", "false")>]
    [<TestCase("12 >= 4", "true")>]
    [<TestCase("4 >= 2", "true")>]
    [<TestCase("1 >= 1", "true")>]
    [<TestCase("1 == 3", "false")>]
    [<TestCase("3 == 2", "false")>]
    [<TestCase("2 == 3", "false")>]
    [<TestCase("12 == 4", "false")>]
    [<TestCase("4 == 2", "false")>]
    [<TestCase("1 == 1", "true")>]
    [<TestCase("1 != 3", "true")>]
    [<TestCase("3 != 2", "true")>]
    [<TestCase("2 != 3", "true")>]
    [<TestCase("12 != 4", "true")>]
    [<TestCase("4 != 2", "true")>]
    [<TestCase("1 != 1", "false")>]
    [<TestCase("(1 != 1) || true", "true")>]
    [<TestCase("(1 != 1) || false", "false")>]
    [<TestCase("(1 == 1) || true", "true")>]
    [<TestCase("(1 == 1) || false", "true")>]
    [<TestCase("(1 != 1) && true", "false")>]
    [<TestCase("(1 != 1) && false", "false")>]
    [<TestCase("(1 == 1) && true", "true")>]
    [<TestCase("(1 == 1) && false", "false")>]
    member this.TestCompOperations(actual: string, expected: string) =
        reduce_equals actual expected
    
    [<TestCase("4", "num")>]
    [<TestCase("0 - 4", "num")>]
    [<TestCase("4 % 2", "num")>]
    [<TestCase("4 + 2", "num")>]
    [<TestCase("4 % 2", "num")>]
    [<TestCase("4 - 2", "num")>]
    [<TestCase("4 / 2", "num")>]
    [<TestCase("true && false", "bool")>]
    [<TestCase("false || false && true || false", "bool")>]
    [<TestCase("false", "bool")>]
    [<TestCase("true", "bool")>]
    [<TestCase("1 < 2", "bool")>]
    [<TestCase("1 <= 2", "bool")>]
    [<TestCase("1 > 2", "bool")>]
    [<TestCase("1 >= 2", "bool")>]
    [<TestCase("1 == 2", "bool")>]
    [<TestCase("1 != 2", "bool")>]
    [<TestCase("(1 == 1) && false", "bool")>]
    [<TestCase("(1 <= 1) || false", "bool")>]
    [<TestCase("1 + 2 * 3 + 4 * 5 + 6 * 7", "num")>]
    [<TestCase("1 + 4 / 2", "num")>]
    [<TestCase("1 + 4 / 2 * 3 + 6 / 2 * 5", "num")>]
    member this.TestTypes(actual: string, expected: string) =
        type_equals actual expected    
