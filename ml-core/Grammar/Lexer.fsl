{
open FSharp.Text.Lexing
open Parser
open System
open Core.Term

let setInitialPos (lexbuf:LexBuffer<_>) filename =
     lexbuf.EndPos <- { pos_bol = 0;
                        pos_fname=filename;
                        pos_cnum=0;
                        pos_lnum=1 }

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme = LexBuffer<_>.LexemeString
}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let ident = ['A'-'Z' 'a'-'z' '_'] ['A'-'Z' 'a'-'z' '0'-'9' '_']*
let num = ['0'-'9']+


rule tokenstream = parse
// --------------------------
| "->"       { Parser.ARROW }
| "("      { Parser.LPAR }
| ")"      { Parser.RPAR }
| "::"     { Parser.DOUBLECOLON }
| "["     { Parser.LBRACK }
| "]"     { Parser.RBRACK }
| ","     { Parser.COMMA }
| "&&"   { Parser.AND }
| "||"   { Parser.OR }
| "=="  { Parser.DOUBLEEQUAL }
| "!="  { Parser.NOTEQUAL }
| "<"   { Parser.LESS }
| "<="  { Parser.LESSEQUAL }
| ">"   { Parser.GREATER }
| ">="  { Parser.GREATEREQUAL }
| "+"       { Parser.PLUS }
| "-"       { Parser.MINUS }
| "*"       { Parser.TIMES }
| "/"       { Parser.DIV }
| "%"    { Parser.MOD }
| "fix"    { Parser.FIX }
| "true"  { Parser.TRUE }
| "false" { Parser.FALSE }
| "if"    { Parser.IF }
| "then"  { Parser.THEN }
| "else"  { Parser.ELSE }
| "let"  { Parser.LET }
| "in"  { Parser.IN }
| "rec"  { Parser.REC }
| "fun"  { Parser.FUN }
| "=" { Parser.EQUAL }
| "!" { Parser.EXCLAMATION }
| "ref" { Parser.REF }
| ":=" { Parser.ASSIGN }
| ident    { Parser.IDENT (lexeme lexbuf) }
| num      { Parser.NUM (int (lexeme lexbuf)) }
// --------------------------
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
// --------------------------
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ Parser.EOF }