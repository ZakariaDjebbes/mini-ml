{
open FSharp.Text.Lexing
open Parser
open System
open Core.Term

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme = LexBuffer<_>.LexemeString
}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let ident = ['a'-'z' 'A'-'Z']+
let num = ['0'-'9']+


rule tokenstream = parse
// --------------------------
| "=>"       { Parser.ARROW }
| "("      { Parser.LPAR }
| ")"      { Parser.RPAR }
| "::"     { Parser.DOUBLECOLON }
| "["     { Parser.LBRACK }
| "]"     { Parser.RBRACK }
| ","     { Parser.COMMA }
| "head"   { Parser.HEAD }
| "tail"   { Parser.TAIL }
| "+"       { Parser.PLUS }
| "-"       { Parser.MINUS }
| "*"       { Parser.TIMES }
| "/"       { Parser.DIV }
| "%"    { Parser.MOD }
| ident    { Parser.IDENT (lexeme lexbuf) }
| num      { Parser.NUM (int (lexeme lexbuf)) }
// --------------------------
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
// --------------------------
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ Parser.EOF }